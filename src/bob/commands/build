#!/usr/bin/env bash

#?d Builds your bashop app and packs it to one file
#?c <file> <output_dir>

###########################
# Starts the build process
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
###########################
bashop::run_command::build() {
  local start_file=${args['<file>']}
  local output_dir=${args['<output_dir>']}

  if [[ ! -d ${output_dir} ]]; then
    mkdir -p ${output_dir}
  fi

  local output_file="${output_dir}/${start_file}"
  echo "#!/usr/bin/env bash" > ${output_file}

  bob::build::processFile ${start_file} ${output_dir} ${output_file}
  bashop::printer::success "Build done"
}

#################################
# Processes a file
# Globals:
#   None
# Arguments:
#   string file
#   string output_dir
#   string output_file
#   bool   is_command (optional)
# Returns:
#   None
#################################
bob::build::processFile() {
  local file=${1}
  local output_dir=${2}
  local output_file=${3}
  local is_command=0

  if [[ -n ${!4+1} ]]; then
    local is_command=${4}
  fi

  # Add command files before the app file
  if [[ ${file} =~ ^(.*)bashop/modules/app.sh$ ]] && [[ -d ${BASHOP_APP_COMMAND_ROOT} ]]; then
    local commands=( ${BASHOP_APP_COMMAND_ROOT}/* )
    local command_file

    for command_file in "${commands[@]}"; do
      bob::build::processFile ${command_file} ${output_dir} ${output_file} 1
    done
  fi

  local tmpFile="${output_dir}/tmp_${file##*/}"

  bashop::printer::info "Processing file: ${file}"

  # Create tmp file and add extra line to file to
  # fix issue with files with non empty line at the end
  cp ${file} ${tmpFile}
  echo "" >> ${tmpFile}

  if [[ ${is_command} -eq 1 ]]; then
    echo "#?com ${file##*/}" >> ${output_file}
  fi

  # Process all files and add new ones if found
  IFS=''
  while read -r line; do
    if [[ ${line} =~ ^([ ]*)(source )[\'\"]?([^\"\']*)[\'\"]?$ ]]; then
      local file_to_include=${BASH_REMATCH[3]}

      if [[ ! ${file_to_include} =~ ^\$\{command\}$ ]]; then
        file_to_include=$(eval "echo ${file_to_include}")
  
        bob::build::processFile ${file_to_include} ${output_dir} ${output_file}
      fi
    elif [[ ! ${line} =~ ^\s*$ ]] && [[ ! ${line} =~ ^#! ]]; then
      echo ${line} >> ${output_file}
    fi
  done < ${tmpFile}

  if [[ -f ${tmpFile} ]]; then
    rm ${tmpFile}
  fi
}